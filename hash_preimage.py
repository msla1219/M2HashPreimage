import hashlib
import os


# a brute-force algorithm to find a partial collision
def hash_preimage(target_string):
    if not all([x in '01' for x in target_string]):
        print("Input should be a string of bits")
        return

    # loop to search for the random byte code of ending hash code same as the target_string
    while 1:
        x = os.urandom(32)  # generate random bytes of 32
        x_hash = hashlib.sha256()  # initialize hash object
        x_hash.update(x)  # update hash object with randomly generated bytes
        hex_hash = x_hash.hexdigest()  # get hex hash code
        bin_hash = bin(int(hex_hash, 16))  # convert hex hash code into binary hash code

        # slide the final k pieces of binary hash code
        partial_bin_hash = bin_hash[-len(target_string):len(bin_hash)]

        # break in case of partial hash values are matched
        if partial_bin_hash == target_string:
            nonce = x
            break

    return nonce
